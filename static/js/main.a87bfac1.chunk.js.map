{"version":3,"sources":["Cell.jsx","App.jsx","index.js"],"names":["Cell","props","mesh","useRef","useFrame","state","t","clock","getElapsedTime","current","position","y","Math","sin","phase","castShadow","ref","attach","args","color","extend","OrbitControls","Plane","receiveShadow","width","height","CameraController","useThree","camera","gl","shadowMap","enabled","type","THREE","useEffect","controls","domElement","target","set","minDistance","maxDistance","update","dispose","Scene","scene","background","targetObj","add","intensity","rotation","PI","angle","penumbra","Array","map","_","index","jndex","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"6OAkBeA,MAff,SAAcC,GACZ,IAAMC,EAAOC,mBAMb,OALAC,aAAS,SAACC,GACR,IAAMC,EAAID,EAAME,MAAMC,iBACtBN,EAAKO,QAAQC,SAASC,EAAK,EAAI,EAAKC,KAAKC,IAAI,EAAIP,EAAIL,EAAMa,MAAQ,GAAK,KAIxE,+CAAMC,YAAU,GAAKd,GAArB,IAA4Be,IAAKd,EAAjC,UACE,mCAAmBe,OAAO,WAAWC,KAAM,CAAC,EAAG,GAAK,KACpD,sCAAsBD,OAAO,WAAWE,MAAM,gB,uBCNpDC,YAAO,CAAEC,oBAET,IAAMC,EAAQ,SAACrB,GACb,IAAMC,EAAOC,mBACb,OACE,+CAAMoB,eAAa,GAAKtB,GAAxB,IAA+Be,IAAKd,EAApC,UACE,qCACEe,OAAO,WACPC,KAAM,CAACjB,EAAMuB,MAAOvB,EAAMwB,UAE5B,mCAAmBR,OAAO,WAAWE,MAAM,eAK3CO,EAAmB,WAAO,IAAD,EACNC,cAAfC,EADqB,EACrBA,OAAQC,EADa,EACbA,GAahB,OAZAA,EAAGC,UAAUC,SAAU,EACvBF,EAAGC,UAAUE,KAAOC,mBACpBC,qBAAU,WACR,IAAMC,EAAW,IAAId,IAAcO,EAAQC,EAAGO,YAK9C,OAJAD,EAASE,QAAS,IAAIJ,YAAiBvB,SAAS4B,IAAI,EAAG,EAAG,GAC1DH,EAASI,YAAc,EACvBJ,EAASK,YAAc,GACvBL,EAASM,SACF,WACLN,EAASO,aAEV,CAACd,EAAQC,IACL,MAGHc,EAAQ,WAAO,IAAD,EACQhB,cAAlBiB,EADU,EACVA,MAAOhB,EADG,EACHA,OACfgB,EAAMC,WAAa,IAAIZ,QAAY,GACnC,IAAMa,EAAY,IAAIb,WAKtB,OAJAW,EAAMG,IAAID,GACVA,EAAUpC,SAAS4B,IAAI,EAAG,EAAG,GAC7BV,EAAOlB,SAAS4B,KAAK,EAAG,EAAG,GAGzB,qCACE,8BAAcU,UAAW,KACzB,cAAC,EAAD,CACExB,MAAO,IACPC,OAAQ,IACRf,SAAU,CAAC,GAAI,EAAG,GAClBuC,SAAU,EAAErC,KAAKsC,GAAK,EAAG,EAAG,KAE9B,2BACEnC,YAAU,EACViC,UAAW,GACXX,OAAQS,EACRpC,SAAU,CAAC,EAAG,GAAI,GAClByC,MAAOvC,KAAKsC,GAAK,EACjBE,SAAU,IAGX,YAAIC,MAAM,IAAIC,KAAI,SAACC,EAAGC,GACrB,OAAO,YAAIH,MAAM,IAAIC,KAAI,SAACC,EAAGE,GAC3B,OACE,cAAC,EAAD,CACE3C,MAAO0C,EAAQC,EAEf/C,SAAU,CAAC8C,GAAQA,EAAQC,GAAS,EAAGA,IADlCD,EAAQC,SAMrB,cAAC,EAAD,QAkBSC,MARf,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,OCpFAC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.a87bfac1.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nfunction Cell(props) {\r\n  const mesh = useRef();\r\n  useFrame((state) => {\r\n    const t = state.clock.getElapsedTime();\r\n    mesh.current.position.y = (2 / 3) * Math.sin(6 * t + props.phase / 2) + 1;\r\n  });\r\n\r\n  return (\r\n    <mesh castShadow {...props} ref={mesh}>\r\n      <boxBufferGeometry attach=\"geometry\" args={[1, 0.5, 1]} />\r\n      <meshPhysicalMaterial attach=\"material\" color=\"orange\" />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n","import React, { useRef, useEffect } from \"react\";\nimport { Canvas, extend, useThree } from \"react-three-fiber\";\nimport Cell from \"./Cell\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./style.css\";\nimport * as THREE from \"three\";\n\nextend({ OrbitControls });\n\nconst Plane = (props) => {\n  const mesh = useRef();\n  return (\n    <mesh receiveShadow {...props} ref={mesh}>\n      <planeBufferGeometry\n        attach=\"geometry\"\n        args={[props.width, props.height]}\n      />\n      <meshPhongMaterial attach=\"material\" color=\"white\" />\n    </mesh>\n  );\n};\n\nconst CameraController = () => {\n  const { camera, gl } = useThree();\n  gl.shadowMap.enabled = true;\n  gl.shadowMap.type = THREE.PCFSoftShadowMap;\n  useEffect(() => {\n    const controls = new OrbitControls(camera, gl.domElement);\n    controls.target = new THREE.Object3D().position.set(2, 0, 2);\n    controls.minDistance = 5;\n    controls.maxDistance = 20;\n    controls.update();\n    return () => {\n      controls.dispose();\n    };\n  }, [camera, gl]);\n  return null;\n};\n\nconst Scene = () => {\n  const { scene, camera } = useThree();\n  scene.background = new THREE.Color(0x000000);\n  const targetObj = new THREE.Object3D();\n  scene.add(targetObj);\n  targetObj.position.set(2, 0, 2);\n  camera.position.set(-5, 5, 0);\n\n  return (\n    <>\n      <ambientLight intensity={0.2} />\n      <Plane\n        width={500}\n        height={500}\n        position={[0, -1, 0]}\n        rotation={[-Math.PI / 2, 0, 0]}\n      />\n      <spotLight\n        castShadow\n        intensity={0.5}\n        target={targetObj}\n        position={[2, 10, 2]}\n        angle={Math.PI / 5}\n        penumbra={1}\n      />\n\n      {[...Array(5)].map((_, index) => {\n        return [...Array(5)].map((_, jndex) => {\n          return (\n            <Cell\n              phase={index + jndex}\n              key={index + jndex}\n              position={[index, (index + jndex) / 5, jndex]}\n            />\n          );\n        });\n      })}\n      <CameraController />\n      {/* <orbitControls\n        target0={targetObj.position}\n        target={targetObj.position}\n        args={[camera, domElement]}\n      /> */}\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <Canvas>\n      <Scene />\n    </Canvas>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}